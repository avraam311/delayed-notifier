services:
  app:
    build:
      context: .
      dockerfile: ./cmd/app/Dockerfile
    container_name: app
    ports:
      - "3000:3000"
    depends_on:
      - rabbitmq
    env_file:
      - .env
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: ./cmd/worker/Dockerfile
    container_name: worker
    ports:
      - "3001:3001"
    depends_on:
      - rabbitmq
    env_file:
      - .env
    networks:
      - app-network

  db:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    env_file:
      - .env
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: heidiks/rabbitmq-delayed-message-exchange:3.11.28-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq/
    networks:
      - app-network

volumes:
  rabbitmq-lib:
  rabbitmq-log:


networks:
  app-network:
